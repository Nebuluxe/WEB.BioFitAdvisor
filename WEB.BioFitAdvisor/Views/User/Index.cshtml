@using System.Text.Json
@using API.BioFitAdvisor.Domain
@model IEnumerable<API.BioFitAdvisor.Domain.User>
@{
    ViewData["Title"] = "Usuarios";
    var usersJson = JsonSerializer.Serialize(Model.Select(user => new
    {
        firstName = user.FirstName,
        lastName = user.LastName,
        email = user.Email,
        phone = user.Phone,
        creationDate = user.CreationDate.ToString("yyyy-MM-dd"),
        status = user.Status ? "Activo" : "Inactivo",
        userId = user.UserId
    }));
}

<div class="header-view">
    <h4>@ViewData["Title"]</h4>
    <div class="header-buttons">
        <a class="btn btn-success btn-sm me-1" href="/User/CreateOrEdit">Crear</a>
        <button id="toggleViewButton" class="btn btn-primary btn-sm">Cambiar a Vista de Tarjetas</button>
    </div>
</div>

<!-- Contenedor para la vista de tabla (AG-Grid) -->
<div class="container-section">
    <div id="tableView" class="ag-theme-alpine-dark" style="height: 600px; width: 100%;"></div>
</div>

<!-- Contenedor para la vista de tarjetas -->
<div class="container-section" id="cardView" style="display: none;">
    <div class="row"></div>
</div>

@section Scripts {
    <script src="~/js/agGridConfig.js"></script> <!-- Incluimos la configuración global -->

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Datos generados desde Razor
            var rowData = @Html.Raw(usersJson);

            // Definimos las columnas
            var columnDefs = [
                { headerName: 'Nombre', field: 'firstName', sortable: true, filter: true, checkboxSelection: true },
                { headerName: 'Apellido', field: 'lastName', sortable: true, filter: true },
                { headerName: 'Email', field: 'email', sortable: true, filter: 'agTextColumnFilter', tooltipField: 'email' },
                { headerName: 'Teléfono', field: 'phone', sortable: true, filter: true, cellRenderer: phoneFormatter },
                { headerName: 'Fecha de Creación', field: 'creationDate', sortable: true, filter: 'agDateColumnFilter' },
                { headerName: 'Estado', field: 'status', sortable: true, filter: true, cellRenderer: statusFormatter },
                { headerName: 'Acciones', field: 'userId', cellRenderer: actionsFormatter }
            ];

            // Inicializar AG-Grid con las configuraciones globales
            var gridOptions = getDefaultGridOptions(rowData, columnDefs);

            var gridDiv = document.querySelector('#tableView');
            new agGrid.Grid(gridDiv, gridOptions);

            // Alternar entre la vista de tabla y la vista de tarjetas
            document.getElementById('toggleViewButton').addEventListener('click', function () {
                var tableView = document.getElementById('tableView');
                var cardView = document.getElementById('cardView');
                if (tableView.style.display === 'none') {
                    // Mostrar la vista de tabla
                    tableView.style.display = 'block';
                    cardView.style.display = 'none';
                    this.textContent = 'Cambiar a Vista de Tarjetas';
                } else {
                    // Mostrar la vista de tarjetas
                    tableView.style.display = 'none';
                    cardView.style.display = 'block';
                    this.textContent = 'Cambiar a Vista de Tabla';
                    renderCardView(rowData);
                }
            });

            // Renderizar la vista de tarjetas
            function renderCardView(data) {
                var cardView = document.querySelector('#cardView .row');
                cardView.innerHTML = '';  // Limpiar las tarjetas anteriores

                data.forEach(function (row) {
                    var card = document.createElement('div');
                    card.className = 'col-md-4 mb-3';
                    card.innerHTML = `
                                <div class="card">
                                    <div class="card-body">
                                        <h5 class="card-title">${row.firstName} ${row.lastName}</h5>
                                        <p class="card-text"><strong>Email:</strong> ${row.email}</p>
                                        <p class="card-text"><strong>Teléfono:</strong> ${row.phone}</p>
                                        <p class="card-text"><strong>Fecha de Creación:</strong> ${row.creationDate}</p>
                                        <p class="card-text"><strong>Estado:</strong> <span class="badge ${row.status === 'Activo' ? 'bg-success' : 'bg-danger'}">${row.status}</span></p>
                                        <a href="/User/Details/${row.userId}" class="btn btn-info me-1">Detalles</a>
                                        <a href="/User/CreateOrEdit/${row.userId}" class="btn btn-warning me-1">Editar</a>
                                        <a href="/User/Delete/${row.userId}" class="btn btn-danger">Eliminar</a>
                                    </div>
                                </div>
                            `;
                    cardView.appendChild(card);
                });
            }

            // Buscador global
            document.getElementById('quickSearch').addEventListener('input', function () {
                gridOptions.api.setQuickFilter(this.value);
            });

            // Exportar a CSV
            document.getElementById('exportButton').addEventListener('click', function () {
                gridOptions.api.exportDataAsCsv();
            });
        });
    </script>

    <!-- Agrega el input para el buscador global -->
    <div class="d-flex justify-content-between mb-2">
        <input type="text" id="quickSearch" placeholder="Buscar..." class="form-control w-25">
        <button id="exportButton" class="btn btn-primary">Exportar a CSV</button>
    </div>
}
